{
	"info": {
		"_postman_id": "2d5e0f90-c6ca-47b2-a2d5-20af0d4b68bb",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "28184234"
	},
	"item": [
		{
			"name": "subscriptions",
			"item": [
				{
					"name": "Пушкин запрашивает список подписок без учёта пагинации",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа должен быть 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Ответ должен содержать массив данных\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'Длинна массива должна равняться 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о пользователе, в том числе поле 'id'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о пользователе, в том числе поле 'name'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о пользователе, в том числе поле 'id'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('id');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о пользователе, в том числе поле 'name'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('name');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/users/subscriptions?userId=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"subscriptions"
							],
							"query": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Пушкин запрашивает список подписок с учётом пагинации",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа должен быть 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Ответ должен содержать массив данных\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'Длинна массива должна равняться 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о пользователе, в том числе поле 'id'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о пользователе, в том числе поле 'name'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о пользователе, в том числе поле 'id'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('id');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о пользователе, в том числе поле 'name'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('name');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/users/subscriptions?userId=1&from=0&size=2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"subscriptions"
							],
							"query": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Цветаева запрашивает список подписчиков без учёта пагинации",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа должен быть 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Ответ должен содержать массив данных\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'Длинна массива должна равняться 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о пользователе, в том числе поле 'id'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о пользователе, в том числе поле 'name'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('name');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": "http://localhost:8080/users/subscriptions/4"
					},
					"response": []
				},
				{
					"name": "Пушкин запрашивает список подписчиков с учётом пагинации",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа должен быть 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Ответ должен содержать массив данных\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'Длинна массива должна равняться 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о пользователе, в том числе поле 'id'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о пользователе, в том числе поле 'name'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о пользователе, в том числе поле 'id'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('id');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о пользователе, в том числе поле 'name'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('name');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/users/subscriptions/1?from=0&size=2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"subscriptions",
								"1"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "errors",
			"item": [
				{
					"name": "Ошибка 409 при повторной подписке на пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате JSON\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/users/subscriptions?userId=1&followerId=2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"subscriptions"
							],
							"query": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "followerId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ошибка 404 при отсутствии данных о пользователе",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате JSON\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/users/subscriptions?userId=3782&followerId=3783",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"subscriptions"
							],
							"query": [
								{
									"key": "userId",
									"value": "3782"
								},
								{
									"key": "followerId",
									"value": "3783"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ошибка 409 при попытке отписаться от пользователя будучи неподписанным на него",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате JSON\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/users/subscriptions?userId=3&followerId=4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"subscriptions"
							],
							"query": [
								{
									"key": "userId",
									"value": "3"
								},
								{
									"key": "followerId",
									"value": "4"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "feed",
			"item": [
				{
					"name": "Просмотр события Пушкина",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате JSON\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('title');\r",
									"pm.expect(target).to.have.property('annotation');\r",
									"pm.expect(target).to.have.property('category');\r",
									"pm.expect(target).to.have.property('paid');\r",
									"pm.expect(target).to.have.property('eventDate');\r",
									"pm.expect(target).to.have.property('initiator');\r",
									"pm.expect(target).to.have.property('description');\r",
									"pm.expect(target).to.have.property('participantLimit');\r",
									"pm.expect(target).to.have.property('state');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('location');\r",
									"pm.expect(target).to.have.property('requestModeration');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": "http://localhost:8080/events/1"
					},
					"response": []
				},
				{
					"name": "Получение событий Пушкина Цветаевой",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа должен быть 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Ответ должен содержать массив данных\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'Длинна массива должна равняться 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о событии, в том числе поле 'id'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о событии, в том числе поле 'annotation'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('annotation');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о событии, в том числе данные о категории\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('category');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о событии, в том числе поле 'confirmedRequests'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('confirmedRequests');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о событии, в том числе поле 'eventDate'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('eventDate');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о событии, в том числе об инициаторе\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('initiator');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о событии, в том числе поле 'paid'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('paid');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о событии, в том числе поле 'title'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('title');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о событии, в том числе поле 'views'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('views');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/users/4/events/feed?sort=EVENT_DATE&available=false&from=0&size=3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"4",
								"events",
								"feed"
							],
							"query": [
								{
									"key": "sort",
									"value": "EVENT_DATE"
								},
								{
									"key": "available",
									"value": "false"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение событий Пушкина и Цветаевой Толстым",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа должен быть 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Ответ должен содержать массив данных\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'Длинна массива должна равняться 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о событии, в том числе поле 'id'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о событии, в том числе поле 'annotation'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('annotation');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о событии, в том числе данные о категории\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('category');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о событии, в том числе поле 'confirmedRequests'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('confirmedRequests');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о событии, в том числе поле 'eventDate'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('eventDate');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о событии, в том числе об инициаторе\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('initiator');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о событии, в том числе поле 'paid'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('paid');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о событии, в том числе поле 'title'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('title');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о событии, в том числе поле 'views'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('views');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/users/2/events/feed?sort=EVENT_DATE&available=false&from=0&size=3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"events",
								"feed"
							],
							"query": [
								{
									"key": "sort",
									"value": "EVENT_DATE"
								},
								{
									"key": "available",
									"value": "false"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение событий Пушкина Цветаевой без параметров",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа должен быть 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Ответ должен содержать массив данных\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'Длинна массива должна равняться 0').to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": "http://localhost:8080/users/4/events/feed"
					},
					"response": []
				},
				{
					"name": "Получение событий Пушкина Цветаевой без пагинации",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа должен быть 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Ответ должен содержать массив данных\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'Длинна массива должна равняться 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о событии, в том числе поле 'id'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о событии, в том числе поле 'annotation'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('annotation');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о событии, в том числе данные о категории\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('category');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о событии, в том числе поле 'confirmedRequests'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('confirmedRequests');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о событии, в том числе поле 'eventDate'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('eventDate');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о событии, в том числе об инициаторе\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('initiator');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о событии, в том числе поле 'paid'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('paid');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о событии, в том числе поле 'title'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('title');\r",
									"});\r",
									"pm.test(\"Данные в массиве должны содержать краткую информацию о событии, в том числе поле 'views'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('views');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/users/4/events/feed?sort=EVENT_DATE&available=false",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"4",
								"events",
								"feed"
							],
							"query": [
								{
									"key": "sort",
									"value": "EVENT_DATE"
								},
								{
									"key": "available",
									"value": "false"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}